{
  "hints": {
    "delete()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "create()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "verify_leaf(byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "append_leaf(byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_leaf(byte[],byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgMyAzMwpieXRlY2Jsb2NrIDB4IDB4NzI2ZjZmNzQgMHg3MzY5N2E2NQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDI0Mzc4ZDNjIC8vICJkZWxldGUoKXZvaWQiCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDRjNWM2MWJhIC8vICJjcmVhdGUoKXZvaWQiCj09CmJueiBtYWluX2w5CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NWU0MWQwMTQgLy8gInZlcmlmeV9sZWFmKGJ5dGVbXSxieXRlWzMzXVszXSl2b2lkIgo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDQ2ZTgwNGMyIC8vICJhcHBlbmRfbGVhZihieXRlW10sYnl0ZVszM11bM10pdm9pZCIKPT0KYm56IG1haW5fbDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhmNDIyMjkwZSAvLyAidXBkYXRlX2xlYWYoYnl0ZVtdLGJ5dGVbXSxieXRlWzMzXVszXSl2b2lkIgo9PQpibnogbWFpbl9sNgplcnIKbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB1cGRhdGVsZWFmY2FzdGVyXzQKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgYXBwZW5kbGVhZmNhc3Rlcl8zCmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHZlcmlmeWxlYWZjYXN0ZXJfMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVjYXN0ZXJfMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTA6CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGRlbGV0ZWNhc3Rlcl8wCmludGNfMSAvLyAxCnJldHVybgoKLy8gZGVsZXRlX2Nhc3RlcgpkZWxldGVjYXN0ZXJfMDoKcHJvdG8gMCAwCmNhbGxzdWIgZGVsZXRlXzkKcmV0c3ViCgovLyBjcmVhdGVfY2FzdGVyCmNyZWF0ZWNhc3Rlcl8xOgpwcm90byAwIDAKY2FsbHN1YiBjcmVhdGVfMTAKcmV0c3ViCgovLyB2ZXJpZnlfbGVhZl9jYXN0ZXIKdmVyaWZ5bGVhZmNhc3Rlcl8yOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKY2FsbHN1YiB2ZXJpZnlsZWFmXzExCnJldHN1YgoKLy8gYXBwZW5kX2xlYWZfY2FzdGVyCmFwcGVuZGxlYWZjYXN0ZXJfMzoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmNhbGxzdWIgYXBwZW5kbGVhZl8xMgpyZXRzdWIKCi8vIHVwZGF0ZV9sZWFmX2Nhc3Rlcgp1cGRhdGVsZWFmY2FzdGVyXzQ6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmR1cG4gMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHVwZGF0ZWxlYWZfMTMKcmV0c3ViCgovLyBoYXNoX2NvbmNhdApoYXNoY29uY2F0XzU6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmNvbmNhdApzaGEyNTYKcmV0c3ViCgovLyBpc19yaWdodF9zaWJsaW5nCmlzcmlnaHRzaWJsaW5nXzY6CnByb3RvIDEgMQpmcmFtZV9kaWcgLTEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpwdXNoaW50IDE3MCAvLyAxNzAKPT0KcmV0c3ViCgovLyBjYWxjX3Jvb3QKY2FsY3Jvb3RfNzoKcHJvdG8gMiAxCmJ5dGVjXzAgLy8gIiIKZnJhbWVfZGlnIC0yCnN0b3JlIDIKaW50Y18wIC8vIDAKc3RvcmUgMwpjYWxjcm9vdF83X2wxOgpsb2FkIDMKaW50Y18yIC8vIDMKPApieiBjYWxjcm9vdF83X2w2CmZyYW1lX2RpZyAtMQppbnRjXzMgLy8gMzMKbG9hZCAzCioKaW50Y18zIC8vIDMzCmV4dHJhY3QzCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIGlzcmlnaHRzaWJsaW5nXzYKYm56IGNhbGNyb290XzdfbDUKZnJhbWVfZGlnIDAKZXh0cmFjdCAxIDMyCmxvYWQgMgpjYWxsc3ViIGhhc2hjb25jYXRfNQpjYWxjcm9vdF83X2w0OgpzdG9yZSAyCmxvYWQgMwppbnRjXzEgLy8gMQorCnN0b3JlIDMKYiBjYWxjcm9vdF83X2wxCmNhbGNyb290XzdfbDU6CmxvYWQgMgpmcmFtZV9kaWcgMApleHRyYWN0IDEgMzIKY2FsbHN1YiBoYXNoY29uY2F0XzUKYiBjYWxjcm9vdF83X2w0CmNhbGNyb290XzdfbDY6CmxvYWQgMgpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjYWxjX2luaXRfcm9vdApjYWxjaW5pdHJvb3RfODoKcHJvdG8gMCAxCmJ5dGVjXzAgLy8gIiIKc2hhMjU2CnN0b3JlIDEKaW50Y18wIC8vIDAKc3RvcmUgMApjYWxjaW5pdHJvb3RfOF9sMToKbG9hZCAwCmludGNfMiAvLyAzCjwKYnogY2FsY2luaXRyb290XzhfbDMKbG9hZCAxCmxvYWQgMQpjb25jYXQKc2hhMjU2CnN0b3JlIDEKbG9hZCAwCmludGNfMSAvLyAxCisKc3RvcmUgMApiIGNhbGNpbml0cm9vdF84X2wxCmNhbGNpbml0cm9vdF84X2wzOgpsb2FkIDEKcmV0c3ViCgovLyBkZWxldGUKZGVsZXRlXzk6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmludGNfMSAvLyAxCnJldHVybgoKLy8gY3JlYXRlCmNyZWF0ZV8xMDoKcHJvdG8gMCAwCmJ5dGVjXzEgLy8gInJvb3QiCmNhbGxzdWIgY2FsY2luaXRyb290XzgKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAic2l6ZSIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyB2ZXJpZnlfbGVhZgp2ZXJpZnlsZWFmXzExOgpwcm90byAyIDAKYnl0ZWNfMSAvLyAicm9vdCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCnNoYTI1NgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBjYWxjcm9vdF83Cj09CmFzc2VydApyZXRzdWIKCi8vIGFwcGVuZF9sZWFmCmFwcGVuZGxlYWZfMTI6CnByb3RvIDIgMApmcmFtZV9kaWcgLTIKYnl0ZWNfMCAvLyAiIgohPQphc3NlcnQKYnl0ZWNfMSAvLyAicm9vdCIKYXBwX2dsb2JhbF9nZXQKYnl0ZWNfMCAvLyAiIgpzaGEyNTYKZnJhbWVfZGlnIC0xCmNhbGxzdWIgY2FsY3Jvb3RfNwo9PQphc3NlcnQKYnl0ZWNfMSAvLyAicm9vdCIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCnNoYTI1NgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBjYWxjcm9vdF83CmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzIgLy8gInNpemUiCmJ5dGVjXzIgLy8gInNpemUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCisKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyB1cGRhdGVfbGVhZgp1cGRhdGVsZWFmXzEzOgpwcm90byAzIDAKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJ5dGVjXzAgLy8gIiIKIT0KYXNzZXJ0CmJ5dGVjXzEgLy8gInJvb3QiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMwpleHRyYWN0IDIgMApzaGEyNTYKZnJhbWVfZGlnIC0xCmNhbGxzdWIgY2FsY3Jvb3RfNwo9PQphc3NlcnQKYnl0ZWNfMSAvLyAicm9vdCIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCnNoYTI1NgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBjYWxjcm9vdF83CmFwcF9nbG9iYWxfcHV0CnJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCnB1c2hpbnQgMCAvLyAwCnJldHVybg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "root": {
          "type": "bytes",
          "key": "root",
          "descr": ""
        },
        "size": {
          "type": "uint64",
          "key": "size",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "MerkleTree",
    "methods": [
      {
        "name": "delete",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verify_leaf",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "byte[33][3]",
            "name": "path"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Calculate the expected root hash from the input\nand compare it to the actual stored root hash"
      },
      {
        "name": "append_leaf",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "byte[33][3]",
            "name": "path"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Append a new leaf to the tree"
      },
      {
        "name": "update_leaf",
        "args": [
          {
            "type": "byte[]",
            "name": "old_data"
          },
          {
            "type": "byte[]",
            "name": "new_data"
          },
          {
            "type": "byte[33][3]",
            "name": "path"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Update the value of an existing leaf in the tree"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}