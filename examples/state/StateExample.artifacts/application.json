{
  "hints": {
    "write_local_blob(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "read_local_blob()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "write_global_blob(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "read_global_blob()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_global_state_val(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_global_state_val()string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_reserved_global_state_val(uint8,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_reserved_global_state_val(uint8)uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_local_state_val(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "incr_local_state_val(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_local_state_val()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_reserved_local_state_val(uint8,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_reserved_local_state_val(uint8)string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCnB1c2hpbnQgMCAvLyAwCnJldHVybg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 17,
      "num_uints": 32
    },
    "local": {
      "num_byte_slices": 11,
      "num_uints": 1
    }
  },
  "schema": {
    "global": {
      "declared": {
        "declared_global_value": {
          "type": "bytes",
          "key": "declared_global_value",
          "descr": "A static declared variable, nothing at the protocol level protects it, only the methods defined on ApplicationState do"
        }
      },
      "reserved": {
        "reserved_global_value": {
          "type": "uint64",
          "max_keys": 32,
          "descr": "A reserved app state variable, with 32 possible keys"
        }
      }
    },
    "local": {
      "declared": {
        "declared_local_value": {
          "type": "uint64",
          "key": "declared_local_value",
          "descr": "An int stored for each account that opts in"
        }
      },
      "reserved": {
        "reserved_local_value": {
          "type": "bytes",
          "max_keys": 8,
          "descr": "A reserved state value, allowing 8 keys to be reserved, in this case byte type"
        }
      }
    }
  },
  "contract": {
    "name": "StateExample",
    "methods": [
      {
        "name": "write_local_blob",
        "args": [
          {
            "type": "string",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "read_local_blob",
        "args": [],
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "write_global_blob",
        "args": [
          {
            "type": "string",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "read_global_blob",
        "args": [],
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "set_global_state_val",
        "args": [
          {
            "type": "string",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_global_state_val",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "set_reserved_global_state_val",
        "args": [
          {
            "type": "uint8",
            "name": "k"
          },
          {
            "type": "uint64",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_reserved_global_state_val",
        "args": [
          {
            "type": "uint8",
            "name": "k"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "set_local_state_val",
        "args": [
          {
            "type": "uint64",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "incr_local_state_val",
        "args": [
          {
            "type": "uint64",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_local_state_val",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "set_reserved_local_state_val",
        "args": [
          {
            "type": "uint8",
            "name": "k"
          },
          {
            "type": "string",
            "name": "v"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_reserved_local_state_val",
        "args": [
          {
            "type": "uint8",
            "name": "k"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}